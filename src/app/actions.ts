'use server';

import { z } from 'zod';
import axios from 'axios';

const contactFormSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),
  email: z.string().email({ message: 'Please enter a valid email address.' }),
  message: z.string().min(10, { message: 'Message must be at least 10 characters long.' }),
});

export type ContactFormState = {
  message: string;
  status: 'success' | 'error' | 'unconfigured';
  fieldErrors?: Record<string, string[] | undefined>;
} | {
  message: null;
  status: null;
  fieldErrors?: null;
};

async function sendTelegramNotification(name: string, email: string, message: string): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    console.error('Telegram Bot Token or Chat ID is not configured in environment variables.');
    throw new Error('Server configuration error: Telegram is not set up.');
  }

  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const text = `
New message from your website!

üë§ *Name:* ${name}
üìß *Email:* ${email}
üí¨ *Message:*
${message}
  `;

  try {
    const response = await axios.post(telegramApiUrl, {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
    });

    if (response.status !== 200) {
      // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–∞ –≤ –±–ª–æ–∫–µ catch –Ω–∏–∂–µ
      throw new Error(`Telegram API responded with status ${response.status}`);
    }
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Axios error sending Telegram notification:', error.response?.data || error.message);
      // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      throw new Error('Failed to send message via Telegram. Please check server logs.');
    } else {
      console.error('Unknown error sending Telegram notification:', error);
    }
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∏–ª–∏ –Ω–æ–≤—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤ submitContactForm
    throw error;
  }
}


export async function submitContactForm(
  prevState: ContactFormState,
  formData: FormData
): Promise<ContactFormState> {
  
  const validatedFields = contactFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    message: formData.get('message'),
  });

  if (!validatedFields.success) {
    return {
      message: "Please correct the errors in the form.",
      status: 'error',
      fieldErrors: validatedFields.error.flatten().fieldErrors,
    };
  }

  const { name, email, message } = validatedFields.data;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await sendTelegramNotification(name, email, message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π
    return {
      message: 'Thank you for your message! We will get back to you soon.',
      status: 'success',
    };
  } catch (error) {
    console.error('Failed to submit contact form:', error);
    // –¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ –æ—Ç sendTelegramNotification –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–∞ –∑–¥–µ—Å—å
    // –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
    return {
      message: `Could not send your message. Reason: ${errorMessage}`,
      status: 'error',
    };
  }
}
